<?xml version="1.0"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<project xmlns:au="antlib:org.apache.ant.antunit" default="antunit">

  <import file="../../antunit-base.xml"/>

  <target name="setUp">
    <touch mkdirs="true" file="${input}/a/1/1.txt"/>
    <touch mkdirs="true" file="${input}/a/1/2.txt"/>
    <touch mkdirs="true" file="${input}/a/1/3.txt"/>
    <touch mkdirs="true" file="${input}/b/2/3.txt"/>
    <touch mkdirs="true" file="${input}/b/2/4.txt"/>
    <mkdir dir="${output}"/>
  </target>

  <target name="test-count-in-simple-configuration" depends="setUp">
    <resourcecount property="files">
      <multirootfileset basedirs="${input}/a,${input}/b"/>
    </resourcecount>
    <resourcecount property="dirs">
      <multirootfileset basedirs="${input}/a,${input}/b" type="dir"/>
    </resourcecount>
    <resourcecount property="files-and-dirs">
      <multirootfileset basedirs="${input}/a,${input}/b" type="both"/>
    </resourcecount>
    <au:assertPropertyEquals value="5" name="files"/>
    <au:assertPropertyEquals value="4" name="dirs"/>
    <au:assertPropertyEquals value="9" name="files-and-dirs"/>
  </target>

  <target name="test-count-nested-basedir-elements" depends="setUp">
    <resourcecount property="files">
      <multirootfileset>
        <basedir file="${input}/a"/>
        <basedir file="${input}/b"/>
      </multirootfileset>
    </resourcecount>
    <resourcecount property="dirs">
      <multirootfileset type="dir">
        <basedir file="${input}/a"/>
        <basedir file="${input}/b"/>
      </multirootfileset>
    </resourcecount>
    <resourcecount property="files-and-dirs">
      <multirootfileset type="both">
        <basedir file="${input}/a"/>
        <basedir file="${input}/b"/>
      </multirootfileset>
    </resourcecount>
    <au:assertPropertyEquals value="5" name="files"/>
    <au:assertPropertyEquals value="4" name="dirs"/>
    <au:assertPropertyEquals value="9" name="files-and-dirs"/>
  </target>

  <target name="test-copying" depends="setUp">
    <copy todir="${output}">
      <multirootfileset basedirs="${input}/a,${input}/b"/>
    </copy>
    <au:assertFileExists file="${output}/1/1.txt"/>
    <au:assertFileExists file="${output}/1/2.txt"/>
    <au:assertFileExists file="${output}/1/3.txt"/>
    <au:assertFileExists file="${output}/2/3.txt"/>
    <au:assertFileExists file="${output}/2/4.txt"/>
  </target>

  <target name="test-dirs" depends="setUp">
    <pathconvert property="dirs" pathsep=":">
      <multirootfileset basedirs="${input}/a,${input}/b" type="dir"/>
    </pathconvert>
    <au:assertPropertyEquals value="${input}${file.separator}a:${input}${file.separator}a${file.separator}1:${input}${file.separator}b:${input}${file.separator}b${file.separator}2"
                             name="dirs"/>
  </target>

  <target name="test-include-pattern" depends="setUp">
    <copy todir="${output}">
      <multirootfileset basedirs="${input}/a,${input}/b">
        <include name="**/3.txt"/>
      </multirootfileset>
    </copy>
    <au:assertFileDoesntExist file="${output}/1/1.txt"/>
    <au:assertFileExists file="${output}/1/3.txt"/>
    <au:assertFileExists file="${output}/2/3.txt"/>
    <au:assertFileDoesntExist file="${output}/2/4.txt"/>
    <pathconvert property="dirs" pathsep=":">
      <multirootfileset basedirs="${input}/a,${input}/b" type="dir">
        <include name="1/"/>
      </multirootfileset>
    </pathconvert>
    <au:assertPropertyEquals value="${input}${file.separator}a${file.separator}1" name="dirs"/>
  </target>

  <target name="test-exclude-pattern" depends="setUp">
    <copy todir="${output}">
      <multirootfileset basedirs="${input}/a,${input}/b">
        <exclude name="**/3.txt"/>
      </multirootfileset>
    </copy>
    <au:assertFileExists file="${output}/1/1.txt"/>
    <au:assertFileDoesntExist file="${output}/1/3.txt"/>
    <au:assertFileDoesntExist file="${output}/2/3.txt"/>
    <au:assertFileExists file="${output}/2/4.txt"/>
    <pathconvert property="dirs" pathsep=":">
      <multirootfileset basedirs="${input}/a,${input}/b" type="dir">
        <exclude name="1/"/>
      </multirootfileset>
    </pathconvert>
    <au:assertPropertyEquals value="${input}${file.separator}a:${input}${file.separator}b:${input}${file.separator}b${file.separator}2"
                             name="dirs"/>
  </target>

  <target name="test-selectors" depends="setUp">
    <copy todir="${output}">
      <multirootfileset basedirs="${input}/a,${input}/b">
        <filename regex=".*3\.txt"/>
      </multirootfileset>
    </copy>
    <au:assertFileDoesntExist file="${output}/1/1.txt"/>
    <au:assertFileExists file="${output}/1/3.txt"/>
    <au:assertFileExists file="${output}/2/3.txt"/>
    <au:assertFileDoesntExist file="${output}/2/4.txt"/>
    <pathconvert property="dirs" pathsep=":">
      <multirootfileset basedirs="${input}/a,${input}/b" type="dir">
        <filename regex="1"/>
      </multirootfileset>
    </pathconvert>
    <au:assertPropertyEquals value="${input}${file.separator}a${file.separator}1" name="dirs"/>
  </target>

</project>
